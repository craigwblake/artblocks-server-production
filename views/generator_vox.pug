html
  head
    script(src='/three.js')
    script(src='/vox.js')
    script.
      !{data}

    style(type="text/css").
      body {
        margin: 0;
        padding: 0;
        background-color:black;
      }
      canvas {
        padding: 0;
        margin: auto;
        display: block;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
      }
  body
    canvas(id="c")
    script.
      !{script}




    script.
      window.onload = function() {
        var updateListeners = [];
        var update = function(frame) {
            updateListeners.forEach(function(listener) {
                listener(frame);
            });
        };

        var scene = new THREE.Scene();

        var camera = new THREE.PerspectiveCamera(70, 1, 0.1, 1000);
        var cameraTarget = new THREE.Vector3(0, 16, 0);
        updateListeners.push(function(frame) {
            camera.position.x = -Math.cos(frame * 0.004) * 40;
            camera.position.y = 16;
            camera.position.z = -Math.sin(frame * 0.004) * 40;
            camera.lookAt(cameraTarget);
        });

        var directionalLight = new THREE.DirectionalLight(0xffffff);
        updateListeners.push(function(frame) {
            directionalLight.position.x = -Math.cos(frame * -0.001) * 50;
            directionalLight.position.y = 24;
            directionalLight.position.z = -Math.sin(frame * -0.001) * 50;
        });
        scene.add(directionalLight);

        var ambientLight = new THREE.AmbientLight(0xaaaaaa);
        scene.add(ambientLight);


        var renderer = new THREE.WebGLRenderer({
            canvas: document.getElementById("c")
        });
        renderer.setSize(864, 864);
        renderer.setClearColor(0x000000);

        var parser = new vox.Parser();
        let voxFile=[new Uint8Array(voxx.export())];
        var blob = new Blob(voxFile, {
            type: "text/data"
          });
          url = URL.createObjectURL(blob);


        var parseTasks = [

            url,
        ].map(function(path) {
            return parser.parse(path);
        });
        Promise
            .all(parseTasks)
            .then(function(voxelDataArray) {
                voxelDataArray.forEach(function(voxelData, i) {
                    var builder = new vox.MeshBuilder(voxelData, {
                        voxelSize: 1.0,
                        vertexColor: false,
                        optimizeFaces: true,
                    });
                    var mesh = builder.createMesh();


                    var fv = new THREE.Vector3();

                    scene.add(mesh);
                });
                });


        var frame = 0;
        var render = function() {
            update(frame++);
            renderer.render(scene, camera);
            requestAnimationFrame(render);
        };
        render();
        };
        function Utf8ArrayToStr(array) {
        var out, i, len, c;
        var char2, char3;

        out = "";
        len = array.length;
        i = 0;
        while(i < len) {
        c = array[i++];
        switch(c >> 4)
        {
          case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
            // 0xxxxxxx
            out += String.fromCharCode(c);
            break;
          case 12: case 13:
            // 110x xxxx   10xx xxxx
            char2 = array[i++];
            out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
            break;
          case 14:
            // 1110 xxxx  10xx xxxx  10xx xxxx
            char2 = array[i++];
            char3 = array[i++];
            out += String.fromCharCode(((c & 0x0F) << 12) |
                           ((char2 & 0x3F) << 6) |
                           ((char3 & 0x3F) << 0));
            break;
        }
        }

        return out;
        }
